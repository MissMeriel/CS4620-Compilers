
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 26 23:20:43 EST 2018
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 26 23:20:43 EST 2018
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\011\005\000\002\011\002\000\002\010\021" +
    "\000\002\010\004\000\002\012\007\000\002\015\005\000" +
    "\002\015\002\000\002\013\014\000\002\014\006\000\002" +
    "\014\004\000\002\014\002\000\002\017\005\000\002\017" +
    "\002\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\005\006\000\002\005\003\000\002" +
    "\006\005\000\002\006\013\000\002\006\007\000\002\006" +
    "\003\000\002\006\007\000\002\006\007\000\002\027\011" +
    "\000\002\030\005\000\002\030\002\000\002\026\005\000" +
    "\002\026\007\000\002\026\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\003\006" +
    "\000\002\003\004\000\002\003\010\000\002\003\006\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\006" +
    "\000\002\003\006\000\002\020\006\000\002\020\004\000" +
    "\002\021\005\000\002\021\002\000\002\023\004\000\002" +
    "\023\002\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\006\017\005\070\uffc1\001\002\000\004\002" +
    "\253\001\002\000\004\046\011\001\002\000\006\017\005" +
    "\070\010\001\002\000\004\002\uffff\001\002\000\064\005" +
    "\uffc2\007\uffc2\011\uffc2\012\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\025\uffc2\026\uffc2\031\uffc2\032\uffc2\033\uffc2\037\uffc2\052" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\064\uffc2\065\uffc2\067\uffc2\070\uffc2\001\002\000" +
    "\004\044\012\001\002\000\006\037\013\070\uffc1\001\002" +
    "\000\004\061\235\001\002\000\006\037\013\070\010\001" +
    "\002\000\010\002\ufffd\037\ufffd\070\ufffd\001\002\000\010" +
    "\002\000\037\uffc1\070\uffc1\001\002\000\006\037\021\070" +
    "\010\001\002\000\010\002\ufffe\037\ufffe\070\ufffe\001\002" +
    "\000\004\061\022\001\002\000\032\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\027\uffc0\030\uffc0\044\uffc0\001\002\000\004\011\024\001" +
    "\002\000\010\012\ufff8\032\ufff8\070\ufff8\001\002\000\010" +
    "\012\026\032\uffc1\070\uffc1\001\002\000\010\002\ufffa\037" +
    "\ufffa\070\ufffa\001\002\000\006\032\031\070\010\001\002" +
    "\000\010\012\ufff9\032\ufff9\070\ufff9\001\002\000\020\013" +
    "\037\014\041\015\034\036\040\047\035\050\036\051\032" +
    "\001\002\000\004\061\uffeb\001\002\000\004\061\022\001" +
    "\002\000\004\061\ufff0\001\002\000\004\061\uffed\001\002" +
    "\000\004\061\uffec\001\002\000\004\061\ufff1\001\002\000" +
    "\004\061\uffee\001\002\000\004\061\uffef\001\002\000\004" +
    "\007\043\001\002\000\024\010\ufff4\013\037\014\041\015" +
    "\034\027\ufff4\036\040\047\035\050\036\051\032\001\002" +
    "\000\006\010\050\027\047\001\002\000\004\061\022\001" +
    "\002\000\006\010\ufff5\027\ufff5\001\002\000\020\013\037" +
    "\014\041\015\034\036\040\047\035\050\036\051\032\001" +
    "\002\000\004\011\051\001\002\000\054\005\uffc1\007\uffc1" +
    "\011\uffc1\012\uffc1\020\uffc1\025\uffc1\026\uffc1\031\uffc1\033" +
    "\uffc1\052\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\067\uffc1\070\uffc1\001" +
    "\002\000\054\005\uffc1\007\uffc1\011\uffc1\012\ufff2\020\uffc1" +
    "\025\uffc1\026\uffc1\031\uffc1\033\054\052\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\067\uffc1\070\uffc1\001\002\000\054\005\uffe9\007" +
    "\uffe9\011\uffe9\012\uffe9\020\uffe9\025\uffe9\026\uffe9\031\uffe9" +
    "\033\uffe9\052\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\067\uffe9\070\010" +
    "\001\002\000\034\005\077\007\120\025\062\031\101\056" +
    "\103\057\075\060\071\061\022\062\064\063\076\064\073" +
    "\065\100\067\070\001\002\000\004\012\227\001\002\000" +
    "\050\005\077\007\066\011\067\020\065\025\062\026\061" +
    "\031\101\052\072\055\102\056\103\057\075\060\071\061" +
    "\022\062\064\063\076\064\073\065\100\067\070\070\010" +
    "\001\002\000\054\005\uffc1\007\uffc1\011\uffc1\012\uffc1\020" +
    "\uffc1\025\uffc1\026\uffc1\031\uffc1\033\uffc1\052\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\067\uffc1\070\uffc1\001\002\000\026\004\uffca" +
    "\005\uffca\006\uffca\010\uffca\022\uffca\023\uffca\024\uffca\027" +
    "\uffca\030\uffca\044\uffca\001\002\000\004\007\222\001\002" +
    "\000\034\005\077\007\066\025\062\031\101\056\103\057" +
    "\075\060\071\061\022\062\064\063\076\064\073\065\100" +
    "\067\070\001\002\000\004\030\215\001\002\000\026\004" +
    "\uffce\005\uffce\006\uffce\010\uffce\022\uffce\023\uffce\024\uffce" +
    "\027\uffce\030\uffce\044\uffce\001\002\000\004\007\204\001" +
    "\002\000\036\005\077\007\120\015\117\025\062\031\101" +
    "\056\103\057\075\060\071\061\022\062\064\063\076\064" +
    "\073\065\100\067\070\001\002\000\052\005\uffc1\007\uffc1" +
    "\011\uffc1\012\uffc1\020\uffc1\025\uffc1\026\uffc1\031\uffc1\052" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\067\uffc1\070\uffc1\001\002\000" +
    "\026\004\uffc9\005\uffc9\006\uffc9\010\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\027\uffc9\030\uffc9\044\uffc9\001\002\000\026\004" +
    "\uffd1\005\uffd1\006\uffd1\010\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\027\uffd1\030\uffd1\044\uffd1\001\002\000\004\007\171\001" +
    "\002\000\026\004\uffd0\005\uffd0\006\uffd0\010\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\027\uffd0\030\uffd0\044\uffd0\001\002\000" +
    "\056\005\uffe5\007\uffe5\011\uffe5\012\uffe5\020\uffe5\021\uffe5" +
    "\025\uffe5\026\uffe5\031\uffe5\033\uffe5\052\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\067\uffe5\070\uffe5\001\002\000\004\007\166\001" +
    "\002\000\026\004\uffcd\005\uffcd\006\uffcd\010\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\027\uffcd\030\uffcd\044\uffcd\001\002\000" +
    "\034\005\077\007\066\025\062\031\101\056\103\057\075" +
    "\060\071\061\022\062\064\063\076\064\073\065\100\067" +
    "\070\001\002\000\026\004\uffcf\005\uffcf\006\uffcf\010\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\027\uffcf\030\uffcf\044\uffcf\001" +
    "\002\000\004\061\022\001\002\000\004\007\156\001\002" +
    "\000\004\007\104\001\002\000\034\005\077\007\066\025" +
    "\062\031\101\056\103\057\075\060\071\061\022\062\064" +
    "\063\076\064\073\065\100\067\070\001\002\000\006\027" +
    "\106\030\107\001\002\000\034\005\077\007\066\025\062" +
    "\031\101\056\103\057\075\060\071\061\022\062\064\063" +
    "\076\064\073\065\100\067\070\001\002\000\004\061\022" +
    "\001\002\000\004\007\111\001\002\000\036\005\077\007" +
    "\116\010\115\025\062\031\101\056\103\057\075\060\071" +
    "\061\022\062\064\063\076\064\073\065\100\067\070\001" +
    "\002\000\026\004\uffc7\005\uffc7\006\uffc7\010\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\027\uffc7\030\uffc7\044\uffc7\001\002\000" +
    "\020\004\130\005\131\006\132\010\uffc3\022\126\024\127" +
    "\027\147\001\002\000\026\004\uffd6\005\uffd6\006\uffd6\010" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\027\uffd6\030\107\044\uffd6" +
    "\001\002\000\026\004\uffc5\005\uffc5\006\uffc5\010\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\027\uffc5\030\uffc5\044\uffc5\001\002" +
    "\000\036\005\077\007\120\015\117\025\062\031\101\056" +
    "\103\057\075\060\071\061\022\062\064\063\076\064\073" +
    "\065\100\067\070\001\002\000\004\010\145\001\002\000" +
    "\036\005\077\007\120\015\117\025\062\031\101\056\103" +
    "\057\075\060\071\061\022\062\064\063\076\064\073\065" +
    "\100\067\070\001\002\000\020\004\130\005\131\006\132" +
    "\010\140\022\126\023\uffdd\024\127\001\002\000\006\010" +
    "\123\023\124\001\002\000\026\004\uffcb\005\uffcb\006\uffcb" +
    "\010\uffcb\022\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\044" +
    "\uffcb\001\002\000\034\005\077\007\116\025\062\031\101" +
    "\056\103\057\075\060\071\061\022\062\064\063\076\064" +
    "\073\065\100\067\070\001\002\000\022\004\130\005\131" +
    "\006\132\010\uffdf\022\126\023\uffdf\024\127\044\uffdf\001" +
    "\002\000\034\005\077\007\066\025\062\031\101\056\103" +
    "\057\075\060\071\061\022\062\064\063\076\064\073\065" +
    "\100\067\070\001\002\000\034\005\077\007\066\025\062" +
    "\031\101\056\103\057\075\060\071\061\022\062\064\063" +
    "\076\064\073\065\100\067\070\001\002\000\034\005\077" +
    "\007\066\025\062\031\101\056\103\057\075\060\071\061" +
    "\022\062\064\063\076\064\073\065\100\067\070\001\002" +
    "\000\034\005\077\007\066\025\062\031\101\056\103\057" +
    "\075\060\071\061\022\062\064\063\076\064\073\065\100" +
    "\067\070\001\002\000\034\005\077\007\066\025\062\031" +
    "\101\056\103\057\075\060\071\061\022\062\064\063\076" +
    "\064\073\065\100\067\070\001\002\000\026\004\uffd8\005" +
    "\uffd8\006\uffd8\010\uffd8\022\uffd8\023\uffd8\024\uffd8\027\uffd8" +
    "\030\107\044\uffd8\001\002\000\026\004\uffd9\005\uffd9\006" +
    "\uffd9\010\uffd9\022\uffd9\023\uffd9\024\uffd9\027\uffd9\030\107" +
    "\044\uffd9\001\002\000\026\004\uffda\005\uffda\006\uffda\010" +
    "\uffda\022\uffda\023\uffda\024\uffda\027\uffda\030\107\044\uffda" +
    "\001\002\000\026\004\uffdb\005\uffdb\006\uffdb\010\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\027\uffdb\030\107\044\uffdb\001\002" +
    "\000\026\004\uffdc\005\uffdc\006\uffdc\010\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\027\uffdc\030\107\044\uffdc\001\002\000\024" +
    "\004\uffd7\005\uffd7\006\uffd7\010\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\027\uffd7\044\uffd7\001\002\000\020\004\130\005\131" +
    "\006\132\010\140\022\126\023\142\024\127\001\002\000" +
    "\034\005\077\007\066\025\062\031\101\056\103\057\075" +
    "\060\071\061\022\062\064\063\076\064\073\065\100\067" +
    "\070\001\002\000\006\010\144\030\107\001\002\000\010" +
    "\010\uffde\023\uffde\044\uffde\001\002\000\034\005\077\007" +
    "\066\025\062\031\101\056\103\057\075\060\071\061\022" +
    "\062\064\063\076\064\073\065\100\067\070\001\002\000" +
    "\026\004\uffd5\005\uffd5\006\uffd5\010\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\027\uffd5\030\uffd5\044\uffd5\001\002\000\034\005" +
    "\077\007\116\025\062\031\101\056\103\057\075\060\071" +
    "\061\022\062\064\063\076\064\073\065\100\067\070\001" +
    "\002\000\004\010\151\001\002\000\026\004\uffc6\005\uffc6" +
    "\006\uffc6\010\uffc6\022\uffc6\023\uffc6\024\uffc6\027\uffc6\030" +
    "\uffc6\044\uffc6\001\002\000\020\004\130\005\131\006\132" +
    "\010\uffc3\022\126\024\127\027\147\001\002\000\004\010" +
    "\uffc4\001\002\000\006\010\155\030\107\001\002\000\026" +
    "\004\uffd3\005\uffd3\006\uffd3\010\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\027\uffd3\030\uffd3\044\uffd3\001\002\000\034\005\077" +
    "\007\116\025\062\031\101\056\103\057\075\060\071\061" +
    "\022\062\064\063\076\064\073\065\100\067\070\001\002" +
    "\000\016\004\130\005\131\006\132\010\160\022\126\024" +
    "\127\001\002\000\004\044\161\001\002\000\056\005\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6\025\uffe6\026" +
    "\uffe6\031\uffe6\033\uffe6\052\uffe6\055\uffe6\056\uffe6\057\uffe6" +
    "\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\067" +
    "\uffe6\070\uffe6\001\002\000\004\007\163\001\002\000\004" +
    "\010\164\001\002\000\026\004\uffc8\005\uffc8\006\uffc8\010" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8\044\uffc8" +
    "\001\002\000\026\004\uffd4\005\uffd4\006\uffd4\010\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\027\uffd4\030\uffd4\044\uffd4\001\002" +
    "\000\034\005\077\007\066\025\062\031\101\056\103\057" +
    "\075\060\071\061\022\062\064\063\076\064\073\065\100" +
    "\067\070\001\002\000\006\010\170\030\107\001\002\000" +
    "\026\004\uffd2\005\uffd2\006\uffd2\010\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\027\uffd2\030\uffd2\044\uffd2\001\002\000\034\005" +
    "\077\007\116\025\062\031\101\056\103\057\075\060\071" +
    "\061\022\062\064\063\076\064\073\065\100\067\070\001" +
    "\002\000\016\004\130\005\131\006\132\022\126\024\127" +
    "\027\173\001\002\000\034\005\077\007\116\025\062\031" +
    "\101\056\103\057\075\060\071\061\022\062\064\063\076" +
    "\064\073\065\100\067\070\001\002\000\016\004\130\005" +
    "\131\006\132\022\126\024\127\027\175\001\002\000\034" +
    "\005\077\007\116\025\062\031\101\056\103\057\075\060" +
    "\071\061\022\062\064\063\076\064\073\065\100\067\070" +
    "\001\002\000\016\004\130\005\131\006\132\010\177\022" +
    "\126\024\127\001\002\000\004\044\200\001\002\000\056" +
    "\005\uffe7\007\uffe7\011\uffe7\012\uffe7\020\uffe7\021\uffe7\025" +
    "\uffe7\026\uffe7\031\uffe7\033\uffe7\052\uffe7\055\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\067\uffe7\070\uffe7\001\002\000\052\005\uffc1\007\uffc1" +
    "\011\uffc1\012\202\020\uffc1\025\uffc1\026\uffc1\031\uffc1\052" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\067\uffc1\070\uffc1\001\002\000" +
    "\056\005\uffe8\007\uffe8\011\uffe8\012\uffe8\020\uffe8\021\uffe8" +
    "\025\uffe8\026\uffe8\031\uffe8\033\uffe8\052\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\067\uffe8\070\uffe8\001\002\000\022\004\130\005" +
    "\131\006\132\010\uffdd\022\126\023\uffdd\024\127\044\uffdd" +
    "\001\002\000\034\005\077\007\120\025\062\031\101\056" +
    "\103\057\075\060\071\061\022\062\064\063\076\064\073" +
    "\065\100\067\070\001\002\000\006\010\206\023\124\001" +
    "\002\000\046\005\077\007\066\011\067\020\065\025\062" +
    "\026\061\031\101\052\072\055\102\056\103\057\075\060" +
    "\071\061\022\062\064\063\076\064\073\065\100\067\070" +
    "\001\002\000\056\005\uffc1\007\uffc1\011\uffc1\012\uffc1\020" +
    "\uffc1\021\uffc1\025\uffc1\026\uffc1\031\uffc1\033\uffc1\052\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\067\uffc1\070\uffc1\001\002\000\056" +
    "\005\uffe0\007\uffe0\011\uffe0\012\uffe0\020\uffe0\021\211\025" +
    "\uffe0\026\uffe0\031\uffe0\033\uffe0\052\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\067\uffe0\070\010\001\002\000\050\005\uffc1\007\uffc1" +
    "\011\uffc1\020\uffc1\025\uffc1\026\uffc1\031\uffc1\052\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\067\uffc1\070\uffc1\001\002\000\056\005" +
    "\uffe2\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021\uffe2\025\uffe2" +
    "\026\uffe2\031\uffe2\033\uffe2\052\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2" +
    "\067\uffe2\070\uffe2\001\002\000\050\005\077\007\066\011" +
    "\067\020\065\025\062\026\061\031\101\052\072\055\102" +
    "\056\103\057\075\060\071\061\022\062\064\063\076\064" +
    "\073\065\100\067\070\070\010\001\002\000\056\005\uffe1" +
    "\007\uffe1\011\uffe1\012\uffe1\020\uffe1\021\uffe1\025\uffe1\026" +
    "\uffe1\031\uffe1\033\uffe1\052\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\067" +
    "\uffe1\070\uffe1\001\002\000\004\061\022\001\002\000\004" +
    "\007\111\001\002\000\006\030\uffc7\044\220\001\002\000" +
    "\056\005\uffe3\007\uffe3\011\uffe3\012\uffe3\020\uffe3\021\uffe3" +
    "\025\uffe3\026\uffe3\031\uffe3\033\uffe3\052\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\067\uffe3\070\uffe3\001\002\000\026\004\uffcc\005" +
    "\uffcc\006\uffcc\010\uffcc\022\uffcc\023\uffcc\024\uffcc\027\uffcc" +
    "\030\uffcc\044\uffcc\001\002\000\034\005\077\007\116\025" +
    "\062\031\101\056\103\057\075\060\071\061\022\062\064" +
    "\063\076\064\073\065\100\067\070\001\002\000\016\004" +
    "\130\005\131\006\132\010\224\022\126\024\127\001\002" +
    "\000\046\005\077\007\066\011\067\020\065\025\062\026" +
    "\061\031\101\052\072\055\102\056\103\057\075\060\071" +
    "\061\022\062\064\063\076\064\073\065\100\067\070\001" +
    "\002\000\056\005\uffe4\007\uffe4\011\uffe4\012\uffe4\020\uffe4" +
    "\021\uffe4\025\uffe4\026\uffe4\031\uffe4\033\uffe4\052\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\067\uffe4\070\uffe4\001\002\000\054\005" +
    "\uffea\007\uffea\011\uffea\012\uffea\020\uffea\025\uffea\026\uffea" +
    "\031\uffea\033\uffea\052\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\067\uffea" +
    "\070\010\001\002\000\010\012\ufff7\032\ufff7\070\ufff7\001" +
    "\002\000\006\023\124\044\231\001\002\000\004\012\ufff3" +
    "\001\002\000\004\061\022\001\002\000\006\010\ufff6\027" +
    "\ufff6\001\002\000\010\002\ufffb\037\ufffb\070\ufffb\001\002" +
    "\000\004\011\236\001\002\000\004\032\237\001\002\000" +
    "\004\034\240\001\002\000\004\036\241\001\002\000\004" +
    "\016\242\001\002\000\004\007\243\001\002\000\004\035" +
    "\244\001\002\000\004\041\245\001\002\000\004\042\246" +
    "\001\002\000\004\061\247\001\002\000\004\010\250\001" +
    "\002\000\052\005\uffc1\007\uffc1\011\uffc1\012\uffc1\020\uffc1" +
    "\025\uffc1\026\uffc1\031\uffc1\052\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\067\uffc1\070\uffc1\001\002\000\052\005\uffc1\007\uffc1\011" +
    "\uffc1\012\252\020\uffc1\025\uffc1\026\uffc1\031\uffc1\052\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\067\uffc1\070\uffc1\001\002\000\010" +
    "\002\ufffc\037\ufffc\070\ufffc\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\006\002\003\023\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\006\023\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\014\023\013\001\001\000\002\001\001\000\006" +
    "\010\233\023\013\001\001\000\004\011\015\001\001\000" +
    "\004\023\016\001\001\000\004\012\017\001\001\000\002" +
    "\001\001\000\004\024\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\024\001\001\000\004\023\026" +
    "\001\001\000\002\001\001\000\004\013\027\001\001\000" +
    "\002\001\001\000\004\016\032\001\001\000\002\001\001" +
    "\000\004\024\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\043\016" +
    "\044\001\001\000\002\001\001\000\004\024\045\001\001" +
    "\000\002\001\001\000\004\016\231\001\001\000\002\001" +
    "\001\000\006\005\051\023\052\001\001\000\006\017\054" +
    "\023\055\001\001\000\002\001\001\000\012\003\113\004" +
    "\202\024\057\026\227\001\001\000\002\001\001\000\012" +
    "\003\062\006\056\024\057\027\073\001\001\000\004\023" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\220\024\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\113\004\202\024\057" +
    "\026\121\001\001\000\006\005\200\023\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\164\024\057\001\001\000\002\001\001" +
    "\000\004\024\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\104\024\057\001\001\000\002\001\001" +
    "\000\006\003\153\024\057\001\001\000\004\024\107\001" +
    "\001\000\004\020\111\001\001\000\010\003\113\004\112" +
    "\024\057\001\001\000\002\001\001\000\004\021\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\113" +
    "\004\120\024\057\026\121\001\001\000\002\001\001\000" +
    "\012\003\113\004\140\024\057\026\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\113\004\124\024\057\001\001\000\002\001\001\000\006" +
    "\003\136\024\057\001\001\000\006\003\135\024\057\001" +
    "\001\000\006\003\134\024\057\001\001\000\006\003\133" +
    "\024\057\001\001\000\006\003\132\024\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\142\024\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\145\024\057\001\001\000" +
    "\002\001\001\000\010\003\113\004\151\024\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\113\004\156\024\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\166\024\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\113\004\171\024\057\001\001\000" +
    "\002\001\001\000\010\003\113\004\173\024\057\001\001" +
    "\000\002\001\001\000\010\003\113\004\175\024\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\113\004\202\024\057\026\204\001\001" +
    "\000\002\001\001\000\012\003\062\006\206\024\057\027" +
    "\073\001\001\000\004\023\207\001\001\000\004\030\211" +
    "\001\001\000\004\023\212\001\001\000\002\001\001\000" +
    "\012\003\062\006\213\024\057\027\073\001\001\000\002" +
    "\001\001\000\004\024\215\001\001\000\004\020\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\113\004\222\024\057\001\001\000\002\001" +
    "\001\000\012\003\062\006\224\024\057\027\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\250\023\052\001\001\000\004\023\055\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        //System.out.println("cur_SymbolValue: "+ cur_SymbolValue.value);
		report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
		//System.out.println("sym null? "+(sym == null)+"; sym.sym: "+sym.sym);
		//System.err.println("tok null? "+ (tok == null)+"; tok.lexeme: "+ tok.lexeme);
        System.err.println("[" + tok.line + "," + tok.pos + "] "); 
                              System.err.println( message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // identifier ::= ID 
            {
              IdLiteral RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("id.lexeme: "+id.lexeme);
        RESULT = new IdLiteral(id.line, id.pos, id.lexeme);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",18, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comments ::= 
            {
              Object RESULT =null;
		 RESULT = new Object();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("comments",17, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comments ::= comments COMMENT 
            {
              Object RESULT =null;
		 RESULT = new Object();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("comments",17, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // additional_params ::= 
            {
              List<IExp> RESULT =null;
		
        RESULT = new LinkedList<IExp>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("additional_params",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // additional_params ::= COMMA lexp additional_params 
            {
              List<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IExp> ap = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        ap.add(e);
        RESULT = ap;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("additional_params",15, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // params ::= LPAREN RPAREN 
            {
              List<IExp> RESULT =null;
		
        LinkedList<IExp> p  = new LinkedList<IExp>();
        RESULT = p;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("params",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // params ::= LPAREN lexp additional_params RPAREN 
            {
              List<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IExp> ap = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        LinkedList<IExp> p  = new LinkedList<IExp>();
        p.add(e);
        p.addAll(ap);
        RESULT = p;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("params",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp DOT identifier params 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IExp> p = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new CallExp(e1.getLine(), e1.getPos(), e1, id.getLexeme(), new LinkedList<IExp>());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= NEW identifier LPAREN RPAREN 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
        RESULT = new NewExp(n.line, n.pos, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= identifier 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        RESULT = id;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= LPAREN eqexp RPAREN 
            {
              IExp RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = e;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new NotExp(n.line, n.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("false");
		RESULT = new FalseLiteral(t.line, t.pos, t.lexeme, t.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("true");
		RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println(c.lexeme);
		RESULT = new ButtonLiteral(c.line, c.pos, c.lexeme, c.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println(c.lexeme);
		RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println(i.value);
		RESULT = new IntLiteral(i.line, i.pos, i.lexeme, i.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MeggyCheckButton(m.line, m.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new NegExp(m.line, m.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
		RESULT = new ByteCast(e.getLine(), e.getPos(), e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lexp ::= exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = e; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lexp ::= LPAREN lexp RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = e; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lexp ::= lexp TIMES exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new MulExp(t.line, t.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lexp ::= lexp MINUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new MinusExp(m.line, m.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lexp ::= lexp PLUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new PlusExp(p.line, p.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lexp ::= lexp AND exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new AndExp(a.line, a.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lexp ::= lexp LT exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new LtExp(e1.getLine(), e1.getPos(), e1, e2);
		//RESULT = new LtExp(e1.line, e1.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // eqexp ::= lexp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = e;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("eqexp",20, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // eqexp ::= LPAREN lexp EQUAL exp RPAREN 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue eq = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new EqualExp(eq.line, eq.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("eqexp",20, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // eqexp ::= eqexp EQUAL lexp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue eq = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new EqualExp(eq.line, eq.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("eqexp",20, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // else ::= 
            {
              IStatement RESULT =null;
		RESULT = new BlockStatement(0, 0, new LinkedList<IStatement>());
              CUP$mj$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // else ::= ELSE comments statement 
            {
              IStatement RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = s2;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF LPAREN eqexp RPAREN statement comments else 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if",21, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= exp DOT identifier params SEMI 
            {
              IStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IExp> p = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        RESULT = new CallStatement(e1.getLine(), e1.getPos(), e1, id.getLexeme(), p); 
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= WHILE LPAREN lexp RPAREN statement 
            {
              IStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue w = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
		//System.out.println("in while statement");
		RESULT = new WhileStatement(w.line, w.pos, e, s);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= if 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IfStatement i = (IfStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("if");
		RESULT = i;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= MEGGYDELAY LPAREN lexp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		//System.out.println("Delay");
		RESULT = new MeggyDelay(m.line, m.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= MEGGYSETPIXEL LPAREN lexp COMMA lexp COMMA lexp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mspleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mspright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue msp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		//System.out.println("MSP");
		RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lb = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> list = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		//System.out.println("{statement_list}");
		RESULT = new BlockStatement(lb.line, lb.pos, list);
		//System.out.println("successfully set statement::= blockstatements "+ list.size());
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement_list ::= comments 
            {
              List<IStatement> RESULT =null;
		
		RESULT = new LinkedList<IStatement>();
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement_list ::= statement_list comments statement comments 
            {
              List<IStatement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		List<IStatement> sl = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		sl.add(s);
		RESULT = sl;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ToneType(t.line, t.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ButtonType(t.line, t.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ColorType(t.line, t.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= VOID 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new VoidType(t.line, t.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= INT 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new IntType(t.line, t.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= BYTE 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new ByteType(t.line, t.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new BoolType(t.line, t.pos);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // return ::= 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("return",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // return ::= RETURN eqexp SEMI 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = e;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formals ::= 
            {
              LinkedList<Formal> RESULT =null;
		RESULT = new LinkedList<Formal>();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formals ::= type identifier 
            {
              LinkedList<Formal> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		Formal f = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
		LinkedList<Formal> ll = new LinkedList<Formal>();
		ll.add(f);
		RESULT = ll;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formals ::= formals COMMA type identifier 
            {
              LinkedList<Formal> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<Formal> fs = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		Formal f = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
		fs.add(f);
		RESULT = fs;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decl ::= PUBLIC type identifier LPAREN formals RPAREN LBRACE statement_list return RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		LinkedList<Formal> f = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IStatement> sl = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		//int _line_, int _pos_, IType _type_, String _name_, List<Formal> _formals_, 
		//List<VarDecl> _varDecls_, List<IStatement> _statements_, IExp _exp_);
		RESULT = new MethodDecl(p.line, p.pos, t, id.getLexeme(), f, new LinkedList<VarDecl>(), sl, r); 
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methods ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		
		RESULT = new LinkedList<MethodDecl>();
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methods",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methods ::= methods comments method_decl 
            {
              LinkedList<MethodDecl> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<MethodDecl> m = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		m.add(md);
		RESULT = m;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methods",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl ::= CLASS identifier LBRACE methods RBRACE 
            {
              IClassDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> m = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new TopClassDecl(c.line, c.pos, id.getLexeme(), new LinkedList<VarDecl>(), m);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_class ::= comments main_class 
            {
              MainClass RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		RESULT = m;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN statement_list RBRACE 
            {
              MainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> list = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
			BlockStatement blockStatement = new BlockStatement(l.line, l.pos, list);
			//System.out.println("mainClass");
			MainClass _mainClass_ = new MainClass(c.line, c.pos, name.lexeme, param.lexeme, blockStatement);
			RESULT = _mainClass_; 
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classes ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		
		RESULT = new LinkedList<IClassDecl>();
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("classes",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classes ::= classes comments class_decl 
            {
              LinkedList<IClassDecl> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IClassDecl> c = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IClassDecl cd = (IClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		c.add(cd);
		RESULT = c;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("classes",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= comments program 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = p;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class classes 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> c = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new Program(i.line, i.pos, m, c);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

