
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ListIterator;
import ast.node.*;

parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        //System.out.println("cur_SymbolValue: "+ cur_SymbolValue.value);
	report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
	//System.out.println("sym null? "+(sym == null)+"; sym.sym: "+sym.sym);
	//System.err.println("tok null? "+ (tok == null)+"; tok.lexeme: "+ tok.lexeme);
        System.err.println("[" + tok.line + "," + tok.pos + "] "); 
        System.err.println( message + " at " + tok.toString() );
    }
 
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;
terminal SymbolValue TYPE;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;
terminal SymbolValue COMMENT;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IExp exp, lexp;
non terminal LinkedList<IStatement> statement_list;
non terminal IStatement statement;
non terminal List<IStatement> block_list;
non terminal MainClass main_class;
non terminal LinkedList<IClassDecl> classes;
non terminal IClassDecl class_decl;
non terminal VarDecl var_decl;
non terminal LinkedList<VarDecl> var_decl_list;
non terminal MethodDecl method_decl;
non terminal LinkedList<Formal> formals;
non terminal LinkedList<MethodDecl> methods;
non terminal IType type;
non terminal IExp return;
non terminal List<IExp> params;
non terminal List<IExp> additional_params;
non terminal Object comment;
non terminal Object comments;
non terminal IdLiteral identifier;
non terminal IExp byte;
non terminal IExp eqexp;
non terminal IExp compstart;
non terminal IExp arithexp;
non terminal IfStatement if;
non terminal IStatement else;
non terminal AssignStatement assignment;
non terminal LinkedList<Object> body;

/* Declare precedence and associativity  here */
precedence left  TIMES, PLUS, MINUS, AND, EQUAL, ELSE, DOT, COMMENT, TYPE, ID, SEMI;
precedence right UMINUS, CLASS, BYTE, NOT, LPAREN, ELSE, RPAREN, IMPORT, ASSIGN;


/* Meggy Java Grammar */
start with program;

program ::= 
    IMPORT:i MEGGY SEMI main_class:m classes:c
    {:
	   RESULT = new Program(i.line, i.pos, m, c);
    :}
    | comments program:p 
    {:
	    RESULT = p;
    :}
    ;
    
classes ::=
    classes:c comments class_decl:cd
    {:
	    c.add(cd);
	    RESULT = c;
    :}
    | /*nothing*/
    {:
	    RESULT = new LinkedList<IClassDecl>();
    :}
    ;

main_class ::=
    CLASS:c ID:name
    LBRACE PUBLIC STATIC VOID MAIN 
    LPAREN STRING LBRACKET RBRACKET ID:param RPAREN:l
    statement_list:list 
    RBRACE
    {:
	BlockStatement blockStatement = new BlockStatement(l.line, l.pos, list);
	//System.out.println("mainClass");
	MainClass _mainClass_ = new MainClass(c.line, c.pos, name.lexeme, param.lexeme, blockStatement);
	RESULT = _mainClass_; 
    :}
    | comments main_class:m 
    {: RESULT = m; :}
    ;

class_decl ::=
    CLASS:c identifier:id LBRACE var_decl_list:vdl methods:m RBRACE
    {:
	RESULT = new TopClassDecl(c.line, c.pos, id.getLexeme(), vdl, m);
    :}
    ;

methods ::=
    methods:m comments method_decl:md
    {:
	m.add(md);
	RESULT = m;
    :}
    | /*nothing*/
    {:
	RESULT = new LinkedList<MethodDecl>();
    :}
    ;

method_decl ::=
    PUBLIC:p type:t identifier:id LPAREN formals:f RPAREN
    LBRACE body:b return:r RBRACE
    {:
	//VarDecl vd = new VarDecl(t2.getLine(), t2.getPos(), t, id2.lexeme);
	LinkedList<VarDecl> vdl = new LinkedList<VarDecl>();
	LinkedList<IStatement> sl = new LinkedList<IStatement>();
	//ll.add(vd);
	ListIterator<Object> iter = b.listIterator();
	while(iter.hasNext()){
	    Object o = iter.next();
	    if(o instanceof VarDecl){
		VarDecl vd = (VarDecl) o;
		vdl.add(vd);
	    } else if(o instanceof IStatement){
		IStatement is = (IStatement) o;
		sl.add(is);
	    }
	}
	System.out.println("method decl "+id.getLexeme());
	RESULT = new MethodDecl(p.line, p.pos, t, id.getLexeme(), f, vdl, sl, r); 
    :}
    ;


body ::=
    body:b var_decl:vd comments
    {:
	b.add(vd);
	RESULT = b;
    :}
    | body:b statement:s comments
    {:
	b.add(s);
	RESULT = b;
    :}
    | comments /*nothing*/
    {:
	RESULT = new LinkedList<Object>();
    :}
    ;
    
var_decl_list ::=
    var_decl_list:vdl type:t identifier:id SEMI
    {:
//    var_decl_list:vdl var_decl:vd
	System.out.println("var decl "+t.getClass().toString()+" "+id.getLexeme());
	VarDecl vd = new VarDecl(t.getLine(), t.getPos(), t, id.getLexeme());
	vdl.add(vd);
	RESULT = vdl;
    :}
    | /*nothing*/
    {:
	System.out.println("start var decls");
	RESULT = new LinkedList<VarDecl>();
    :}
    ;
    
var_decl ::=
    type:t identifier:id SEMI
    {:
	System.out.println("var decl "+t.getClass().toString()+" "+id.getLexeme());
	RESULT = new VarDecl(t.getLine(), t.getPos(), t, id.getLexeme());
    :}
    ;

formals ::=
    formals:fs COMMA type:t identifier:id
    {:
	Formal f = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
	fs.add(f);
	RESULT = fs;
    :}
    | type:t identifier:id
    {:
	Formal f = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
	LinkedList<Formal> ll = new LinkedList<Formal>();
	ll.add(f);
	RESULT = ll;
    :}
    | /*nothing*/
    {:RESULT = new LinkedList<Formal>();:}
    ;

return ::=
    RETURN compstart:e SEMI
    {:
	    RESULT = e;
    :}
    | /*nothing*/
    ;

type ::=
    BOOLEAN:t
    {:
	    RESULT = new BoolType(t.line, t.pos);
    :}
    | BYTE:t
    {:
	    RESULT = new ByteType(t.line, t.pos);
    :}
    | INT:t
    {:
	    RESULT = new IntType(t.line, t.pos);
    :}
    | VOID:t
    {:
	    RESULT = new VoidType(t.line, t.pos);
    :}
    | MEGGYCOLOR:t
    {:
	    RESULT = new ColorType(t.line, t.pos);
    :}
    | MEGGYBUTTON:t
    {:
	    RESULT = new ButtonType(t.line, t.pos);
    :}
    | MEGGYTONE:t
    {:
	    RESULT = new ToneType(t.line, t.pos);
    :}
    | identifier:id
    {:
	System.out.println("type id "+id.getLexeme());
	RESULT = new ClassType(id.getLine(), id.getPos(), id.getLexeme());
    :}
    ;

statement_list ::=
    comments statement:s comments statement_list:sl
    {:
	sl.addFirst(s);
	RESULT = sl;
    :}
    | /* Empty */
    {:
	System.out.println("start statement list");
	RESULT = new LinkedList<IStatement>();
    :}
    ;

statement ::=
    LBRACE:lb statement_list:list RBRACE
    {:
	RESULT = new BlockStatement(lb.line, lb.pos, list);
    :}
    | MEGGYSETPIXEL:msp LPAREN lexp:e1 COMMA lexp:e2 COMMA lexp:e3 RPAREN SEMI
    {:
	RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
    :}
    | MEGGYDELAY:m LPAREN lexp:e RPAREN SEMI
    {:
	RESULT = new MeggyDelay(m.line, m.pos, e);
    :}
    | MEGGYTONESTART:m LPAREN exp:e1 COMMA exp:e2 RPAREN SEMI
    {:
	RESULT = new MeggyToneStart(m.line, m.pos, e1, e2);
    :}
    | if:i 
    {:
	RESULT = i;
    :}
    | WHILE:w LPAREN compstart:e RPAREN statement:s 
    {:	
	RESULT = new WhileStatement(w.line, w.pos, e, s);
    :}
    | exp:e1 DOT identifier:id params:p SEMI
    {:
	RESULT = new CallStatement(e1.getLine(), e1.getPos(), e1, id.getLexeme(), p); 
    :}
    | identifier:id ASSIGN compstart:e SEMI
    {:
	System.out.println("assign "+ id.getLexeme()+ " to "+e.getClass().toString());
	RESULT = new AssignStatement(id.getLine(), id.getPos(), id.getLexeme(), e);
    :}
    ;
    
assignment ::=
    identifier:id ASSIGN compstart:e SEMI
    {:
	System.out.println("assign "+ id.getLexeme()+ " to "+e.getClass().toString());
	RESULT = new AssignStatement(id.getLine(), id.getPos(), id.getLexeme(), e);
    :}
    ;
    
if ::=
    IF:i LPAREN compstart:e RPAREN statement:s1 comments else:s2
    {:
	RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
    :}
    ;

else ::=
    ELSE comments statement:s2
    {:
	RESULT = s2;
    :}
    | /*nothing*/
    {:
	RESULT = new BlockStatement(0, 0, new LinkedList<IStatement>());
    :}
    ;

compstart ::=
    compstart:e1 AND:a eqexp:e2
    {:
	RESULT = new AndExp(a.line, a.pos, e1, e2);
    :}
    | eqexp:e
    {:
	RESULT = e;
    :}
    ;

eqexp ::=
    eqexp:e1 EQUAL lexp:e2
    {:
	RESULT = new EqualExp(e1.getLine(), e1.getPos(), e1, e2);
    :}
    | eqexp:e1 LT lexp:e2
    {:
	RESULT = new LtExp(e1.getLine(), e1.getPos(), e1, e2);
    :}
    | lexp:e 
    {:
	RESULT = e;
    :}
    ;

lexp ::=
    | lexp:e1 TIMES:t arithexp:e2
    {:
	RESULT = new MulExp(t.line, t.pos, e1, e2);
    :}
    | LPAREN lexp:e RPAREN
    {:
	RESULT = e;
    :}
    | arithexp:e
    {:
	RESULT = e;
    :}
    ;

arithexp::=
    arithexp:e1 PLUS:p exp:e2
   {:
       RESULT = new PlusExp(p.line, p.pos, e1, e2);
   :}
   | arithexp:e1 MINUS:m exp:e2
   {:
       RESULT = new MinusExp(m.line, m.pos, e1, e2);
   :}
   | exp:e
   {:
       RESULT = e;
   :}
   ;

exp ::=
    LPAREN BYTE RPAREN exp:e 
    {:	
	RESULT = new ByteCast(e.getLine(), e.getPos(), e);
    :}
    | MEGGYGETPIXEL:m LPAREN exp:e1 COMMA exp:e2 RPAREN
    {:
	RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2);
    :}
    | MEGGYCHECKBUTTON:m LPAREN exp:e RPAREN
    {:
	RESULT = new MeggyCheckButton(m.line, m.pos, e);
    :}
    | INT_LITERAL:i
    {:
	RESULT = new IntLiteral(i.line, i.pos, i.lexeme, i.value);
    :}
    | COLOR_LITERAL:c
    {:
	RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
    :}
    | BUTTON_LITERAL:c
    {:
	RESULT = new ButtonLiteral(c.line, c.pos, c.lexeme, c.value);
    :}
    | TRUE:t
    {:
	RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
    :}
    | FALSE:t
    {:
	RESULT = new FalseLiteral(t.line, t.pos, t.lexeme, t.value);
    :}
    | NOT:n exp:e
    {:
	RESULT = new NotExp(n.line, n.pos, e);
    :}
    | LPAREN:lp compstart:e RPAREN
    {:
	RESULT = e;
    :}
    | identifier:id
    {:
	System.out.println("exp id "+id.getLexeme());
	RESULT = id;
    :}
    | THIS:t
    {:
	RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
    :}
    | NEW:n identifier:id LPAREN RPAREN
    {:
	RESULT = new NewExp(n.line, n.pos, id.getLexeme());
    :}
    | exp:e1 DOT identifier:id params:p
    {:
	RESULT = new CallExp(e1.getLine(), e1.getPos(), e1, id.getLexeme(), p);
    :}
    | TONE_LITERAL:tl
    {:
	String[] tlString = tl.lexeme.split(".");
	String toneId = tlString[tlString.length-1];
	int toneVal = 0;
	if(toneId == "C3"){
	    toneVal = 61157;
	}else if(toneId == "Cs3"){
	    toneVal = 57724;
	}else if(toneId == "D3"){
	    toneVal = 54485;
	}else if(toneId == "Ds3"){
	    toneVal = 51427;
	}else if(toneId == "E3"){
	    toneVal = 48541;
	}else if(toneId == "F3"){
	    toneVal = 45816;
	}else if(toneId == "Fs3"){
	    toneVal = 43243;
	}else if(toneId == "G3"){
	    toneVal = 40816;
	}else if(toneId == "Gs3"){
	    toneVal = 38526;
	}else if(toneId == "A3"){
	    toneVal = 36363;
	}else if(toneId ==  "As3"){
	    toneVal = 34323;
	}else if(toneId == "B3"){
	    toneVal = 32397;
	}
	RESULT = new ToneLiteral(tl.line, tl.pos, toneId, toneVal);
    :}
    ;

params ::=
    LPAREN compstart:e additional_params:ap RPAREN
    {:
        LinkedList<IExp> p  = new LinkedList<IExp>();
        p.add(e);
        p.addAll(ap);
        RESULT = p;
    :}
    | LPAREN RPAREN
    {:
        RESULT = new LinkedList<IExp>();
    :}
    ;

additional_params ::=
     additional_params:ap COMMA compstart:e 
    {:
        ap.add(e);
        RESULT = ap;
    :}
    | /* nothing */
    {:
        RESULT = new LinkedList<IExp>();
    :}
    ;

comments ::=
    comments COMMENT
    {:
	RESULT = new Object();
    :}
    | /*nothing*/ 
    {:
	RESULT = new Object();
    :}
    ;


identifier ::=
    ID:id
    {:
	//System.out.println("id "+id.lexeme);
        RESULT = new IdLiteral(id.line, id.pos, id.lexeme);
    :}
    ;
