
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 14 22:30:17 EST 2018
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ListIterator;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 14 22:30:17 EST 2018
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\011\005\000\002\011\002\000\002\010\021" +
    "\000\002\010\004\000\002\012\010\000\002\017\005\000" +
    "\002\017\002\000\002\015\014\000\002\036\005\000\002" +
    "\036\005\000\002\036\003\000\002\014\006\000\002\014" +
    "\002\000\002\013\005\000\002\016\006\000\002\016\004" +
    "\000\002\016\002\000\002\021\005\000\002\021\002\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\005\006\000\002\005\002" +
    "\000\002\006\005\000\002\006\013\000\002\006\007\000" +
    "\002\006\003\000\002\006\007\000\002\006\007\000\002" +
    "\006\006\000\002\035\006\000\002\033\011\000\002\034" +
    "\005\000\002\034\002\000\002\031\005\000\002\031\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\003\000" +
    "\002\004\002\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\003\006\000\002\003\010\000\002\003\006" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\004\000\002" +
    "\003\005\000\002\003\003\000\002\003\003\000\002\003" +
    "\006\000\002\003\006\000\002\022\006\000\002\022\004" +
    "\000\002\023\005\000\002\023\002\000\002\025\004\000" +
    "\002\025\002\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\017\005\071\uffb7\001\002\000\004\002" +
    "\267\001\002\000\004\047\011\001\002\000\006\017\005" +
    "\071\010\001\002\000\004\002\uffff\001\002\000\100\007" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\025\uffb8\026\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\036\uffb8\037\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\001\002\000\004" +
    "\044\012\001\002\000\006\037\013\071\uffb7\001\002\000" +
    "\004\062\251\001\002\000\006\037\013\071\010\001\002" +
    "\000\010\002\ufffd\037\ufffd\071\ufffd\001\002\000\010\002" +
    "\000\037\uffb7\071\uffb7\001\002\000\006\037\021\071\010" +
    "\001\002\000\010\002\ufffe\037\ufffe\071\ufffe\001\002\000" +
    "\004\062\022\001\002\000\036\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\022\uffb6\023\uffb6\024\uffb6\027" +
    "\uffb6\030\uffb6\044\uffb6\045\uffb6\062\uffb6\001\002\000\004" +
    "\011\024\001\002\000\030\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\032\ufff2\036\ufff2\050\ufff2\051\ufff2\052\ufff2\062\ufff2" +
    "\071\ufff2\001\002\000\030\012\ufff8\013\030\014\026\015" +
    "\037\032\ufff8\036\031\050\035\051\034\052\032\062\022" +
    "\071\ufff8\001\002\000\004\062\uffe9\001\002\000\010\012" +
    "\042\032\uffb7\071\uffb7\001\002\000\004\062\uffeb\001\002" +
    "\000\004\062\uffe8\001\002\000\004\062\uffe5\001\002\000" +
    "\004\062\uffe4\001\002\000\004\062\uffe6\001\002\000\004" +
    "\062\uffe7\001\002\000\004\062\022\001\002\000\004\062" +
    "\uffea\001\002\000\004\044\041\001\002\000\030\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\032\ufff3\036\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\062\ufff3\071\ufff3\001\002\000\010\002\ufffa" +
    "\037\ufffa\071\ufffa\001\002\000\006\032\045\071\010\001" +
    "\002\000\010\012\ufff9\032\ufff9\071\ufff9\001\002\000\022" +
    "\013\030\014\026\015\037\036\031\050\035\051\034\052" +
    "\032\062\022\001\002\000\004\062\022\001\002\000\004" +
    "\007\050\001\002\000\026\010\uffee\013\030\014\026\015" +
    "\037\027\uffee\036\031\050\035\051\034\052\032\062\022" +
    "\001\002\000\006\010\055\027\054\001\002\000\004\062" +
    "\022\001\002\000\006\010\uffef\027\uffef\001\002\000\022" +
    "\013\030\014\026\015\037\036\031\050\035\051\034\052" +
    "\032\062\022\001\002\000\004\011\056\001\002\000\070" +
    "\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\020" +
    "\uffb7\025\uffb7\026\uffb7\031\uffb7\033\uffb7\036\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7" +
    "\071\uffb7\001\002\000\066\007\072\011\073\012\uffec\013" +
    "\030\014\026\015\037\020\071\025\065\026\063\031\105" +
    "\033\066\036\031\050\035\051\034\052\032\053\077\056" +
    "\107\057\110\060\102\061\076\062\022\063\070\064\103" +
    "\065\100\066\104\070\074\001\002\000\070\007\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\025\ufff4" +
    "\026\ufff4\031\ufff4\033\ufff4\036\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\070\ufff4\071\010\001" +
    "\002\000\070\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\020\uffb7\025\uffb7\026\uffb7\031\uffb7\033\uffb7\036" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\070\uffb7\071\uffb7\001\002\000\010\030\uffc0\045\211" +
    "\062\uffe4\001\002\000\004\007\241\001\002\000\004\062" +
    "\022\001\002\000\032\007\072\025\065\031\105\057\110" +
    "\060\102\061\076\062\022\063\070\064\103\065\100\066" +
    "\104\070\074\001\002\000\044\006\uffd1\007\123\022\uffd1" +
    "\023\uffd1\024\uffd1\025\065\031\105\044\uffd1\057\110\060" +
    "\102\061\076\062\022\063\070\064\103\065\100\066\104" +
    "\070\074\001\002\000\004\030\230\001\002\000\026\004" +
    "\uffc4\005\uffc4\006\uffc4\010\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\027\uffc4\030\uffc4\044\uffc4\001\002\000\004\007\217\001" +
    "\002\000\046\006\uffd1\007\123\010\uffd1\015\150\022\uffd1" +
    "\023\uffd1\024\uffd1\025\065\031\105\057\110\060\102\061" +
    "\076\062\022\063\070\064\103\065\100\066\104\070\074" +
    "\001\002\000\050\007\uffb7\011\uffb7\012\uffe2\020\uffb7\025" +
    "\uffb7\026\uffb7\031\uffb7\053\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070" +
    "\uffb7\071\uffb7\001\002\000\026\004\uffbf\005\uffbf\006\uffbf" +
    "\010\uffbf\022\uffbf\023\uffbf\024\uffbf\027\uffbf\030\uffbf\044" +
    "\uffbf\001\002\000\070\007\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\020\uffb7\025\uffb7\026\uffb7\031\uffb7\033" +
    "\uffb7\036\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\070\uffb7\071\uffb7\001\002\000\026\004\uffc7" +
    "\005\uffc7\006\uffc7\010\uffc7\022\uffc7\023\uffc7\024\uffc7\027" +
    "\uffc7\030\uffc7\044\uffc7\001\002\000\004\007\174\001\002" +
    "\000\026\004\uffc6\005\uffc6\006\uffc6\010\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\027\uffc6\030\uffc6\044\uffc6\001\002\000\072" +
    "\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\020" +
    "\uffde\021\uffde\025\uffde\026\uffde\031\uffde\033\uffde\036\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde" +
    "\070\uffde\071\uffde\001\002\000\004\007\171\001\002\000" +
    "\026\004\uffc3\005\uffc3\006\uffc3\010\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\027\uffc3\030\uffc3\044\uffc3\001\002\000\026\004" +
    "\uffc5\005\uffc5\006\uffc5\010\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\027\uffc5\030\uffc5\044\uffc5\001\002\000\004\062\022\001" +
    "\002\000\004\012\165\001\002\000\004\007\161\001\002" +
    "\000\004\007\111\001\002\000\032\007\072\025\065\031" +
    "\105\057\110\060\102\061\076\062\022\063\070\064\103" +
    "\065\100\066\104\070\074\001\002\000\006\027\114\030" +
    "\115\001\002\000\026\004\uffc0\005\uffc0\006\uffc0\010\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\027\uffc0\030\uffc0\044\uffc0\001" +
    "\002\000\032\007\072\025\065\031\105\057\110\060\102" +
    "\061\076\062\022\063\070\064\103\065\100\066\104\070" +
    "\074\001\002\000\004\062\022\001\002\000\004\007\117" +
    "\001\002\000\046\006\uffd1\007\123\010\121\022\uffd1\023" +
    "\uffd1\024\uffd1\025\065\027\uffd1\031\105\057\110\060\102" +
    "\061\076\062\022\063\070\064\103\065\100\066\104\070" +
    "\074\001\002\000\026\004\uffbd\005\uffbd\006\uffbd\010\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\027\uffbd\030\uffbd\044\uffbd\001" +
    "\002\000\026\004\uffbb\005\uffbb\006\uffbb\010\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\027\uffbb\030\uffbb\044\uffbb\001\002\000" +
    "\026\004\uffcb\005\uffcb\006\uffcb\010\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\027\uffcb\030\115\044\uffcb\001\002\000\046\006" +
    "\uffd1\007\123\010\uffd1\015\150\022\uffd1\023\uffd1\024\uffd1" +
    "\025\065\031\105\057\110\060\102\061\076\062\022\063" +
    "\070\064\103\065\100\066\104\070\074\001\002\000\020" +
    "\006\141\010\uffd2\022\uffd2\023\uffd2\024\uffd2\027\uffd2\044" +
    "\uffd2\001\002\000\016\010\uffd5\022\136\023\137\024\uffd5" +
    "\027\uffd5\044\uffd5\001\002\000\024\004\143\005\144\006" +
    "\uffce\010\uffce\022\uffce\023\uffce\024\uffce\027\uffce\044\uffce" +
    "\001\002\000\010\010\uffb9\024\130\027\uffb9\001\002\000" +
    "\050\006\uffd1\007\123\010\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\065\027\uffd1\031\105\044\uffd1\057\110\060\102\061" +
    "\076\062\022\063\070\064\103\065\100\066\104\070\074" +
    "\001\002\000\006\010\133\027\132\001\002\000\046\006" +
    "\uffd1\007\123\010\uffd1\022\uffd1\023\uffd1\024\uffd1\025\065" +
    "\027\uffd1\031\105\057\110\060\102\061\076\062\022\063" +
    "\070\064\103\065\100\066\104\070\074\001\002\000\026" +
    "\004\uffbc\005\uffbc\006\uffbc\010\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\027\uffbc\030\uffbc\044\uffbc\001\002\000\010\010\uffba" +
    "\024\130\027\uffba\001\002\000\016\010\uffd6\022\136\023" +
    "\137\024\uffd6\027\uffd6\044\uffd6\001\002\000\050\006\uffd1" +
    "\007\123\010\uffd1\022\uffd1\023\uffd1\024\uffd1\025\065\027" +
    "\uffd1\031\105\044\uffd1\057\110\060\102\061\076\062\022" +
    "\063\070\064\103\065\100\066\104\070\074\001\002\000" +
    "\050\006\uffd1\007\123\010\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\065\027\uffd1\031\105\044\uffd1\057\110\060\102\061" +
    "\076\062\022\063\070\064\103\065\100\066\104\070\074" +
    "\001\002\000\020\006\141\010\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\027\uffd4\044\uffd4\001\002\000\032\007\072\025\065" +
    "\031\105\057\110\060\102\061\076\062\022\063\070\064" +
    "\103\065\100\066\104\070\074\001\002\000\024\004\143" +
    "\005\144\006\uffd0\010\uffd0\022\uffd0\023\uffd0\024\uffd0\027" +
    "\uffd0\044\uffd0\001\002\000\032\007\072\025\065\031\105" +
    "\057\110\060\102\061\076\062\022\063\070\064\103\065" +
    "\100\066\104\070\074\001\002\000\032\007\072\025\065" +
    "\031\105\057\110\060\102\061\076\062\022\063\070\064" +
    "\103\065\100\066\104\070\074\001\002\000\026\004\uffcc" +
    "\005\uffcc\006\uffcc\010\uffcc\022\uffcc\023\uffcc\024\uffcc\027" +
    "\uffcc\030\115\044\uffcc\001\002\000\026\004\uffcd\005\uffcd" +
    "\006\uffcd\010\uffcd\022\uffcd\023\uffcd\024\uffcd\027\uffcd\030" +
    "\115\044\uffcd\001\002\000\020\006\141\010\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\027\uffd3\044\uffd3\001\002\000\004\010" +
    "\155\001\002\000\014\006\141\010\154\022\uffd2\023\uffd2" +
    "\024\uffd2\001\002\000\006\010\153\024\130\001\002\000" +
    "\026\004\uffc1\005\uffc1\006\uffc1\010\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\027\uffc1\030\uffc1\044\uffc1\001\002\000\020\006" +
    "\uffcf\010\uffcf\022\uffcf\023\uffcf\024\uffcf\027\uffcf\044\uffcf" +
    "\001\002\000\032\007\072\025\065\031\105\057\110\060" +
    "\102\061\076\062\022\063\070\064\103\065\100\066\104" +
    "\070\074\001\002\000\026\004\uffca\005\uffca\006\uffca\010" +
    "\uffca\022\uffca\023\uffca\024\uffca\027\uffca\030\uffca\044\uffca" +
    "\001\002\000\006\010\160\030\115\001\002\000\026\004" +
    "\uffc9\005\uffc9\006\uffc9\010\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\027\uffc9\030\uffc9\044\uffc9\001\002\000\036\006\uffd1\007" +
    "\123\010\uffd1\025\065\031\105\057\110\060\102\061\076" +
    "\062\022\063\070\064\103\065\100\066\104\070\074\001" +
    "\002\000\006\006\141\010\163\001\002\000\004\044\164" +
    "\001\002\000\072\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\020\uffdf\021\uffdf\025\uffdf\026\uffdf\031\uffdf" +
    "\033\uffdf\036\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\070\uffdf\071\uffdf\001\002\000\010\012" +
    "\ufff7\032\ufff7\071\ufff7\001\002\000\004\007\167\001\002" +
    "\000\004\010\170\001\002\000\026\004\uffbe\005\uffbe\006" +
    "\uffbe\010\uffbe\022\uffbe\023\uffbe\024\uffbe\027\uffbe\030\uffbe" +
    "\044\uffbe\001\002\000\032\007\072\025\065\031\105\057" +
    "\110\060\102\061\076\062\022\063\070\064\103\065\100" +
    "\066\104\070\074\001\002\000\006\010\173\030\115\001" +
    "\002\000\026\004\uffc8\005\uffc8\006\uffc8\010\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\027\uffc8\030\uffc8\044\uffc8\001\002\000" +
    "\036\006\uffd1\007\123\025\065\027\uffd1\031\105\057\110" +
    "\060\102\061\076\062\022\063\070\064\103\065\100\066" +
    "\104\070\074\001\002\000\006\006\141\027\176\001\002" +
    "\000\036\006\uffd1\007\123\025\065\027\uffd1\031\105\057" +
    "\110\060\102\061\076\062\022\063\070\064\103\065\100" +
    "\066\104\070\074\001\002\000\006\006\141\027\200\001" +
    "\002\000\036\006\uffd1\007\123\010\uffd1\025\065\031\105" +
    "\057\110\060\102\061\076\062\022\063\070\064\103\065" +
    "\100\066\104\070\074\001\002\000\006\006\141\010\202" +
    "\001\002\000\004\044\203\001\002\000\072\007\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0" +
    "\025\uffe0\026\uffe0\031\uffe0\033\uffe0\036\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0\071" +
    "\uffe0\001\002\000\070\007\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\020\ufff6\025\ufff6\026\ufff6\031\ufff6\033" +
    "\ufff6\036\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065" +
    "\ufff6\066\ufff6\070\ufff6\071\010\001\002\000\004\012\216" +
    "\001\002\000\046\007\072\011\073\020\071\025\065\026" +
    "\063\031\105\053\077\056\107\057\110\060\102\061\076" +
    "\062\022\063\070\064\103\065\100\066\104\070\074\071" +
    "\010\001\002\000\050\007\uffb7\011\uffb7\012\uffb7\020\uffb7" +
    "\025\uffb7\026\uffb7\031\uffb7\053\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\070\uffb7\071\uffb7\001\002\000\006\030\uffc0\045\211\001" +
    "\002\000\044\006\uffd1\007\123\022\uffd1\023\uffd1\024\uffd1" +
    "\025\065\031\105\044\uffd1\057\110\060\102\061\076\062" +
    "\022\063\070\064\103\065\100\066\104\070\074\001\002" +
    "\000\006\024\130\044\213\001\002\000\072\007\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\020\uffdb\021\uffdb" +
    "\025\uffdb\026\uffdb\031\uffdb\033\uffdb\036\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\070\uffdb\071" +
    "\uffdb\001\002\000\050\007\uffb7\011\uffb7\012\uffe2\020\uffb7" +
    "\025\uffb7\026\uffb7\031\uffb7\053\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\070\uffb7\071\010\001\002\000\004\012\uffe3\001\002\000" +
    "\072\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\020\uffe1\021\uffe1\025\uffe1\026\uffe1\031\uffe1\033\uffe1\036" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\070\uffe1\071\uffe1\001\002\000\044\006\uffd1\007\123" +
    "\010\uffd1\022\uffd1\023\uffd1\024\uffd1\025\065\031\105\057" +
    "\110\060\102\061\076\062\022\063\070\064\103\065\100" +
    "\066\104\070\074\001\002\000\006\010\221\024\130\001" +
    "\002\000\044\007\072\011\073\020\071\025\065\026\063" +
    "\031\105\053\077\056\107\057\110\060\102\061\076\062" +
    "\022\063\070\064\103\065\100\066\104\070\074\001\002" +
    "\000\072\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\020\uffb7\021\uffb7\025\uffb7\026\uffb7\031\uffb7\033\uffb7" +
    "\036\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\070\uffb7\071\uffb7\001\002\000\072\007\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\020\uffd7\021\224" +
    "\025\uffd7\026\uffd7\031\uffd7\033\uffd7\036\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\070\uffd7\071" +
    "\010\001\002\000\046\007\uffb7\011\uffb7\020\uffb7\025\uffb7" +
    "\026\uffb7\031\uffb7\053\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7" +
    "\071\uffb7\001\002\000\072\007\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\020\uffd9\021\uffd9\025\uffd9\026\uffd9" +
    "\031\uffd9\033\uffd9\036\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9" +
    "\064\uffd9\065\uffd9\066\uffd9\070\uffd9\071\uffd9\001\002\000" +
    "\046\007\072\011\073\020\071\025\065\026\063\031\105" +
    "\053\077\056\107\057\110\060\102\061\076\062\022\063" +
    "\070\064\103\065\100\066\104\070\074\071\010\001\002" +
    "\000\072\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\020\uffd8\021\uffd8\025\uffd8\026\uffd8\031\uffd8\033\uffd8" +
    "\036\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\070\uffd8\071\uffd8\001\002\000\004\062\022\001" +
    "\002\000\004\007\117\001\002\000\006\030\uffbd\044\233" +
    "\001\002\000\072\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\020\uffdc\021\uffdc\025\uffdc\026\uffdc\031\uffdc" +
    "\033\uffdc\036\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\070\uffdc\071\uffdc\001\002\000\006\024" +
    "\130\044\235\001\002\000\004\012\uffed\001\002\000\026" +
    "\004\uffc2\005\uffc2\006\uffc2\010\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\027\uffc2\030\uffc2\044\uffc2\001\002\000\004\044\240" +
    "\001\002\000\070\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\020\ufff1\025\ufff1\026\ufff1\031\ufff1\033\ufff1" +
    "\036\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\070\ufff1\071\ufff1\001\002\000\044\006\uffd1\007" +
    "\123\010\uffd1\022\uffd1\023\uffd1\024\uffd1\025\065\031\105" +
    "\057\110\060\102\061\076\062\022\063\070\064\103\065" +
    "\100\066\104\070\074\001\002\000\006\010\243\024\130" +
    "\001\002\000\044\007\072\011\073\020\071\025\065\026" +
    "\063\031\105\053\077\056\107\057\110\060\102\061\076" +
    "\062\022\063\070\064\103\065\100\066\104\070\074\001" +
    "\002\000\072\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\020\uffdd\021\uffdd\025\uffdd\026\uffdd\031\uffdd\033" +
    "\uffdd\036\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\056\uffdd" +
    "\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\070\uffdd\071\uffdd\001\002\000\070\007\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\025" +
    "\ufff5\026\ufff5\031\ufff5\033\ufff5\036\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\070\ufff5\071\010" +
    "\001\002\000\004\062\022\001\002\000\006\010\ufff0\027" +
    "\ufff0\001\002\000\010\002\ufffb\037\ufffb\071\ufffb\001\002" +
    "\000\004\011\252\001\002\000\004\032\253\001\002\000" +
    "\004\034\254\001\002\000\004\036\255\001\002\000\004" +
    "\016\256\001\002\000\004\007\257\001\002\000\004\035" +
    "\260\001\002\000\004\041\261\001\002\000\004\042\262" +
    "\001\002\000\004\062\263\001\002\000\004\010\264\001" +
    "\002\000\050\007\uffb7\011\uffb7\012\uffe2\020\uffb7\025\uffb7" +
    "\026\uffb7\031\uffb7\053\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\uffb7" +
    "\071\uffb7\001\002\000\004\012\266\001\002\000\010\002" +
    "\ufffc\037\ufffc\071\ufffc\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\002\003\025\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\006\025\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\014\025\013\001\001\000\002\001\001\000\006" +
    "\010\247\025\013\001\001\000\004\011\015\001\001\000" +
    "\004\025\016\001\001\000\004\012\017\001\001\000\002" +
    "\001\001\000\004\026\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\024\001\001\000\010\017\026" +
    "\020\035\026\032\001\001\000\002\001\001\000\004\025" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\043\001\001\000\002\001\001\000\006\020\045\026\032" +
    "\001\001\000\004\026\046\001\001\000\002\001\001\000" +
    "\010\016\050\020\051\026\032\001\001\000\002\001\001" +
    "\000\004\026\052\001\001\000\002\001\001\000\006\020" +
    "\245\026\032\001\001\000\002\001\001\000\006\025\057" +
    "\036\056\001\001\000\020\003\066\006\060\013\074\020" +
    "\063\021\105\026\061\033\100\001\001\000\002\001\001" +
    "\000\004\025\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\236\001\001\000\006\003\235\026\112" +
    "\001\001\000\016\003\121\004\123\026\112\030\124\031" +
    "\233\032\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\121\004\123\026\112\030" +
    "\124\031\151\032\125\001\001\000\006\005\204\025\205" +
    "\001\001\000\002\001\001\000\004\025\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\111\026\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\156" +
    "\026\112\001\001\000\004\026\115\001\001\000\004\022" +
    "\117\001\001\000\016\003\121\004\123\026\112\030\124" +
    "\031\126\032\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\121\004\150\026\112" +
    "\030\124\031\151\032\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\130\001\001" +
    "\000\014\003\121\004\123\026\112\030\134\032\125\001" +
    "\001\000\002\001\001\000\016\003\121\004\123\026\112" +
    "\030\124\031\133\032\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\121\004\146" +
    "\026\112\032\125\001\001\000\012\003\121\004\137\026" +
    "\112\032\125\001\001\000\002\001\001\000\010\003\121" +
    "\026\112\032\141\001\001\000\002\001\001\000\006\003" +
    "\145\026\112\001\001\000\006\003\144\026\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\155\026\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\121\004\161\026\112\032\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\171\026\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\121\004\174\026\112\032" +
    "\125\001\001\000\002\001\001\000\012\003\121\004\176" +
    "\026\112\032\125\001\001\000\002\001\001\000\012\003" +
    "\121\004\200\026\112\032\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\066\006\206\026\207\033\100" +
    "\001\001\000\004\025\213\001\001\000\002\001\001\000" +
    "\016\003\121\004\123\026\112\030\124\031\211\032\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\214\025\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\121\004\123\026\112\030\124\031\217\032" +
    "\125\001\001\000\002\001\001\000\012\003\066\006\221" +
    "\026\207\033\100\001\001\000\004\025\222\001\001\000" +
    "\004\034\224\001\001\000\004\025\225\001\001\000\002" +
    "\001\001\000\012\003\066\006\226\026\207\033\100\001" +
    "\001\000\002\001\001\000\004\026\230\001\001\000\004" +
    "\022\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\121\004\123\026" +
    "\112\030\124\031\241\032\125\001\001\000\002\001\001" +
    "\000\012\003\066\006\243\026\207\033\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\264\025\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        //System.out.println("cur_SymbolValue: "+ cur_SymbolValue.value);
	report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
	//System.out.println("sym null? "+(sym == null)+"; sym.sym: "+sym.sym);
	//System.err.println("tok null? "+ (tok == null)+"; tok.lexeme: "+ tok.lexeme);
        System.err.println("[" + tok.line + "," + tok.pos + "] "); 
        System.err.println( message + " at " + tok.toString() );
    }
 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // identifier ::= ID 
            {
              IdLiteral RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	//System.out.println("id "+id.lexeme);
        RESULT = new IdLiteral(id.line, id.pos, id.lexeme);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("identifier",20, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comments ::= 
            {
              Object RESULT =null;
		
	RESULT = new Object();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("comments",19, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comments ::= comments COMMENT 
            {
              Object RESULT =null;
		
	RESULT = new Object();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("comments",19, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // additional_params ::= 
            {
              List<IExp> RESULT =null;
		
        RESULT = new LinkedList<IExp>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("additional_params",17, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // additional_params ::= additional_params COMMA compstart 
            {
              List<IExp> RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IExp> ap = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
        ap.add(e);
        RESULT = ap;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("additional_params",17, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // params ::= LPAREN RPAREN 
            {
              List<IExp> RESULT =null;
		
        RESULT = new LinkedList<IExp>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // params ::= LPAREN compstart additional_params RPAREN 
            {
              List<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IExp> ap = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
        LinkedList<IExp> p  = new LinkedList<IExp>();
        p.add(e);
        p.addAll(ap);
        RESULT = p;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp DOT identifier params 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IExp> p = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new CallExp(e1.getLine(), e1.getPos(), e1, id.getLexeme(), p);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= NEW identifier LPAREN RPAREN 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
	RESULT = new NewExp(n.line, n.pos, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= identifier 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	System.out.println("exp id "+id.getLexeme());
	RESULT = id;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= LPAREN compstart RPAREN 
            {
              IExp RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new NotExp(n.line, n.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new FalseLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new ButtonLiteral(c.line, c.pos, c.lexeme, c.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new IntLiteral(i.line, i.pos, i.lexeme, i.value);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	RESULT = new MeggyCheckButton(m.line, m.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
	RESULT = new ByteCast(e.getLine(), e.getPos(), e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithexp ::= exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
       RESULT = e;
   
              CUP$mj$result = parser.getSymbolFactory().newSymbol("arithexp",24, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arithexp ::= arithexp MINUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
       RESULT = new MinusExp(m.line, m.pos, e1, e2);
   
              CUP$mj$result = parser.getSymbolFactory().newSymbol("arithexp",24, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithexp ::= arithexp PLUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
       RESULT = new PlusExp(p.line, p.pos, e1, e2);
   
              CUP$mj$result = parser.getSymbolFactory().newSymbol("arithexp",24, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lexp ::= arithexp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lexp ::= LPAREN lexp RPAREN 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lexp ::= lexp TIMES arithexp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new MulExp(t.line, t.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lexp ::= 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("lexp",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // eqexp ::= lexp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("eqexp",22, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // eqexp ::= eqexp LT lexp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new LtExp(e1.getLine(), e1.getPos(), e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("eqexp",22, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // eqexp ::= eqexp EQUAL lexp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new EqualExp(e1.getLine(), e1.getPos(), e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("eqexp",22, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compstart ::= eqexp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("compstart",23, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // compstart ::= compstart AND eqexp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new AndExp(a.line, a.pos, e1, e2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("compstart",23, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else ::= 
            {
              IStatement RESULT =null;
		
	RESULT = new BlockStatement(0, 0, new LinkedList<IStatement>());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("else",26, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // else ::= ELSE comments statement 
            {
              IStatement RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = s2;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("else",26, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF LPAREN compstart RPAREN statement comments else 
            {
              IfStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("if",25, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment ::= identifier ASSIGN compstart SEMI 
            {
              AssignStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	System.out.println("assign "+ id.getLexeme()+ " to "+e.getClass().toString());
	RESULT = new AssignStatement(id.getLine(), id.getPos(), id.getLexeme(), e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("assignment",27, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= identifier ASSIGN compstart SEMI 
            {
              IStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	System.out.println("assign "+ id.getLexeme()+ " to "+e.getClass().toString());
	RESULT = new AssignStatement(id.getLine(), id.getPos(), id.getLexeme(), e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= exp DOT identifier params SEMI 
            {
              IStatement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IExp> p = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	RESULT = new CallStatement(e1.getLine(), e1.getPos(), e1, id.getLexeme(), p); 
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= WHILE LPAREN compstart RPAREN statement 
            {
              IStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue w = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
	RESULT = new WhileStatement(w.line, w.pos, e, s);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= if 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IfStatement i = (IfStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	RESULT = i;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= MEGGYDELAY LPAREN lexp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
	RESULT = new MeggyDelay(m.line, m.pos, e);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= MEGGYSETPIXEL LPAREN lexp COMMA lexp COMMA lexp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mspleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mspright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue msp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
	RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lb = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	RESULT = new BlockStatement(lb.line, lb.pos, list);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_list ::= 
            {
              LinkedList<IStatement> RESULT =null;
		
	System.out.println("start statement list");
	RESULT = new LinkedList<IStatement>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_list ::= comments statement comments statement_list 
            {
              LinkedList<IStatement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IStatement> sl = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	sl.addFirst(s);
	RESULT = sl;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= identifier 
            {
              IType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	System.out.println("type id "+id.getLexeme());
	RESULT = new ClassType(id.getLine(), id.getPos(), id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    RESULT = new ToneType(t.line, t.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    RESULT = new ButtonType(t.line, t.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    RESULT = new ColorType(t.line, t.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= VOID 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    RESULT = new VoidType(t.line, t.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= INT 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    RESULT = new IntType(t.line, t.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= BYTE 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    RESULT = new ByteType(t.line, t.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    RESULT = new BoolType(t.line, t.pos);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // return ::= 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("return",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return ::= RETURN compstart SEMI 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	    RESULT = e;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("return",15, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= 
            {
              LinkedList<Formal> RESULT =null;
		RESULT = new LinkedList<Formal>();
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= type identifier 
            {
              LinkedList<Formal> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	Formal f = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
	LinkedList<Formal> ll = new LinkedList<Formal>();
	ll.add(f);
	RESULT = ll;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formals ::= formals COMMA type identifier 
            {
              LinkedList<Formal> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<Formal> fs = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	Formal f = new Formal(t.getLine(), t.getPos(), t, id.getLexeme());
	fs.add(f);
	RESULT = fs;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_decl ::= type identifier SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	System.out.println("var decl "+t.getClass().toString()+" "+id.getLexeme());
	RESULT = new VarDecl(t.getLine(), t.getPos(), t, id.getLexeme());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_decl",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_decl_list ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		
	System.out.println("start var decls");
	RESULT = new LinkedList<VarDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_decl_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decl_list ::= var_decl_list type identifier SEMI 
            {
              LinkedList<VarDecl> RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		LinkedList<VarDecl> vdl = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
//    var_decl_list:vdl var_decl:vd
	System.out.println("var decl "+t.getClass().toString()+" "+id.getLexeme());
	VarDecl vd = new VarDecl(t.getLine(), t.getPos(), t, id.getLexeme());
	vdl.add(vd);
	RESULT = vdl;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_decl_list",10, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= comments 
            {
              LinkedList<Object> RESULT =null;
		
	RESULT = new LinkedList<Object>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("body",28, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= body statement comments 
            {
              LinkedList<Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	b.add(s);
	RESULT = b;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("body",28, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= body var_decl comments 
            {
              LinkedList<Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	b.add(vd);
	RESULT = b;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("body",28, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decl ::= PUBLIC type identifier LPAREN formals RPAREN LBRACE body return RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		LinkedList<Formal> f = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp r = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	//VarDecl vd = new VarDecl(t2.getLine(), t2.getPos(), t, id2.lexeme);
	LinkedList<VarDecl> vdl = new LinkedList<VarDecl>();
	LinkedList<IStatement> sl = new LinkedList<IStatement>();
	//ll.add(vd);
	ListIterator<Object> iter = b.listIterator();
	while(iter.hasNext()){
	    Object o = iter.next();
	    if(o instanceof VarDecl){
		VarDecl vd = (VarDecl) o;
		vdl.add(vd);
	    } else if(o instanceof IStatement){
		IStatement is = (IStatement) o;
		sl.add(is);
	    }
	}
	System.out.println("method decl "+id.getLexeme());
	RESULT = new MethodDecl(p.line, p.pos, t, id.getLexeme(), f, vdl, sl, r); 
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methods ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		
	RESULT = new LinkedList<MethodDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methods",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methods ::= methods comments method_decl 
            {
              LinkedList<MethodDecl> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<MethodDecl> m = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	m.add(md);
	RESULT = m;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("methods",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl ::= CLASS identifier LBRACE var_decl_list methods RBRACE 
            {
              IClassDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IdLiteral id = (IdLiteral)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<VarDecl> vdl = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<MethodDecl> m = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	RESULT = new TopClassDecl(c.line, c.pos, id.getLexeme(), vdl, m);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_class ::= comments main_class 
            {
              MainClass RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = m; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN statement_list RBRACE 
            {
              MainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
	BlockStatement blockStatement = new BlockStatement(l.line, l.pos, list);
	//System.out.println("mainClass");
	MainClass _mainClass_ = new MainClass(c.line, c.pos, name.lexeme, param.lexeme, blockStatement);
	RESULT = _mainClass_; 
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classes ::= 
            {
              LinkedList<IClassDecl> RESULT =null;
		
	    RESULT = new LinkedList<IClassDecl>();
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("classes",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classes ::= classes comments class_decl 
            {
              LinkedList<IClassDecl> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		LinkedList<IClassDecl> c = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IClassDecl cd = (IClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    c.add(cd);
	    RESULT = c;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("classes",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= comments program 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	    RESULT = p;
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class classes 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IClassDecl> c = (LinkedList<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
	   RESULT = new Program(i.line, i.pos, m, c);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

