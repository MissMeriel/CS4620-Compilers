
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;


parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        //System.out.println("cur_SymbolValue: "+ cur_SymbolValue.value);
		report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
		System.out.println("sym null? "+(sym == null));
		System.out.println("sym.sym: "+sym.sym);
		System.err.println("tok null? "+ (tok == null));
		System.err.println("tok.lexeme: "+ tok.lexeme);
        System.err.println("[" + tok.line + "," + tok.pos + "] "); 
                              System.err.println( message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;
terminal SymbolValue COMMENT;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal program;
non terminal Integer exp;
non terminal statement;
non terminal statement_list;
non terminal main_class;

/* Declare precedence and associativity  here */
precedence left TIMES;
precedence right UMINUS;


/* Meggy Java Grammar */
start with program;

program ::= 
	 IMPORT MEGGY SEMI main_class
    | COMMENT program
	;
    
main_class ::=
        CLASS ID:name     
            {: java.io.PrintStream sout 
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                // Check filename is class name, if not exit with error message
                System.out.println(".s file created");
				//System.exit(0);   
            :}
        LBRACE PUBLIC STATIC VOID MAIN 
        LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
        LBRACE 
          {: 
            System.out.println("Generate prolog using avrH.rtl.s");
            InputStream mainPrologue=null;
            BufferedReader reader=null;
            try {
                // The syntax for loading a text resource file 
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainPrologue 
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrH.rtl.s");
                reader = new BufferedReader(new 
                    InputStreamReader(mainPrologue));

                String println = null;
                while ((println = reader.readLine()) != null) {
                  parser.out.println(println);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
				System.out.println("Error on avrH.rtl.s: "+e2.getMessage());
            }
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
					System.out.println("IOException on avrH");
                }
            }
          :}
        statement_list:list RBRACE
		  {:
				System.out.println("statement_list");
				System.out.println(list);
		  :}
        RBRACE
          {:
            System.out.println("Generate prolog using avrF.rtl.s");
            InputStream mainPrologue=null;
            BufferedReader reader=null;
            try {
                mainPrologue 
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrF.rtl.s");
                reader = new BufferedReader(new 
                    InputStreamReader(mainPrologue));

                String println = null;
                while ((println = reader.readLine()) != null) {
                  parser.out.println(println);
                }
            } catch ( Exception e2) {
				e2.printStackTrace();
				System.out.println("Error on avrF.rtl.s: "+e2.getMessage());
			}
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
				   System.out.println("Error on avrF.rtl.s: "+e.getMessage());	
                }
            }
            parser.out.flush();
          :}
    ;

statement_list ::=
		statement_list statement
	|	/* Empty */
	;

statement ::=
	MEGGYSETPIXEL LPAREN 
	exp:e1 COMMA 
	exp:e2 COMMA 
	exp:e3 
	RPAREN SEMI
	{:
		//System.out.println("MEGGYSETPIXEL");
		parser.out.println("\n\t/* pop args off of stack */");
		parser.out.println("\tpop r20");
		parser.out.println("\tpop r22");
		parser.out.println("\tpop r24");
		parser.out.println("\n\t/* Draw pixels, display slate */");
		parser.out.println("\tcall _Z6DrawPxhhh");
		parser.out.println("\tcall _Z12DisplaySlatev");
	:}
	| COMMENT 
	;

exp ::=
	LPAREN BYTE RPAREN exp:e 
	{:	
		parser.out.println("\n\t/* cast to byte */");
		parser.out.println("\tpop r25");
		parser.out.println("\tpop r24");
		parser.out.println("\tpush r24");
	:}
	| INT_LITERAL:i
	{:
		Integer integer = new Integer(i.lexeme);
		parser.out.println("\n\t/* load int "+ integer + "*/");		
		parser.out.println("\tldi r24,lo8(" + integer + ")" );
		parser.out.println("\tldi r25,hi8("+integer+")");		
		parser.out.println("\n\t/* push int "+ integer + "onto stack */");
		parser.out.println("\tpush r24");
		parser.out.println("\tpush r25");
	:}
	| COLOR_LITERAL:c
	{:
        parser.out.println("\n\t/* load " + c.value + " for "+c.lexeme+" */");
        parser.out.println("\tldi r22, " + c.value);
        parser.out.println("\tpush r22");
	:}
	;
